{
  "version": 3,
  "sources": ["../../../../../node_modules/@middy/core/index.js", "../../../../../node_modules/@middy/util/index.js", "../../../../../node_modules/@middy/http-json-body-parser/index.js", "../../../../../src/functions/order/handler.ts", "../../../../../src/libs/apiGateway.ts", "../../../../../src/libs/lambda.ts", "../../../../../src/services/database.service.ts", "../../../../../src/enums/status-code.enum.ts", "../../../../../src/models/response.model.ts"],
  "sourcesContent": ["\"use strict\";\n\nconst middy = (baseHandler = () => {}, plugin) => {\n  var _plugin$beforePrefetc;\n\n  plugin === null || plugin === void 0 ? void 0 : (_plugin$beforePrefetc = plugin.beforePrefetch) === null || _plugin$beforePrefetc === void 0 ? void 0 : _plugin$beforePrefetc.call(plugin);\n  const beforeMiddlewares = [];\n  const afterMiddlewares = [];\n  const onErrorMiddlewares = [];\n\n  const instance = (event = {}, context = {}) => {\n    var _plugin$requestStart;\n\n    plugin === null || plugin === void 0 ? void 0 : (_plugin$requestStart = plugin.requestStart) === null || _plugin$requestStart === void 0 ? void 0 : _plugin$requestStart.call(plugin);\n    const request = {\n      event,\n      context,\n      response: undefined,\n      error: undefined,\n      internal: {}\n    };\n    return runRequest(request, [...beforeMiddlewares], baseHandler, [...afterMiddlewares], [...onErrorMiddlewares], plugin);\n  };\n\n  instance.use = middlewares => {\n    if (Array.isArray(middlewares)) {\n      for (const middleware of middlewares) {\n        instance.applyMiddleware(middleware);\n      }\n\n      return instance;\n    }\n\n    return instance.applyMiddleware(middlewares);\n  };\n\n  instance.applyMiddleware = middleware => {\n    const {\n      before,\n      after,\n      onError\n    } = middleware;\n\n    if (!before && !after && !onError) {\n      throw new Error('Middleware must be an object containing at least one key among \"before\", \"after\", \"onError\"');\n    }\n\n    if (before) instance.before(before);\n    if (after) instance.after(after);\n    if (onError) instance.onError(onError);\n    return instance;\n  }; // Inline Middlewares\n\n\n  instance.before = beforeMiddleware => {\n    beforeMiddlewares.push(beforeMiddleware);\n    return instance;\n  };\n\n  instance.after = afterMiddleware => {\n    afterMiddlewares.unshift(afterMiddleware);\n    return instance;\n  };\n\n  instance.onError = onErrorMiddleware => {\n    onErrorMiddlewares.push(onErrorMiddleware);\n    return instance;\n  };\n\n  instance.__middlewares = {\n    before: beforeMiddlewares,\n    after: afterMiddlewares,\n    onError: onErrorMiddlewares\n  };\n  return instance;\n};\n\nconst runRequest = async (request, beforeMiddlewares, baseHandler, afterMiddlewares, onErrorMiddlewares, plugin) => {\n  try {\n    await runMiddlewares(request, beforeMiddlewares, plugin); // Check if before stack hasn't exit early\n\n    if (request.response === undefined) {\n      var _plugin$beforeHandler, _plugin$afterHandler;\n\n      plugin === null || plugin === void 0 ? void 0 : (_plugin$beforeHandler = plugin.beforeHandler) === null || _plugin$beforeHandler === void 0 ? void 0 : _plugin$beforeHandler.call(plugin);\n      request.response = await baseHandler(request.event, request.context);\n      plugin === null || plugin === void 0 ? void 0 : (_plugin$afterHandler = plugin.afterHandler) === null || _plugin$afterHandler === void 0 ? void 0 : _plugin$afterHandler.call(plugin);\n      await runMiddlewares(request, afterMiddlewares, plugin);\n    }\n  } catch (e) {\n    // Reset response changes made by after stack before error thrown\n    request.response = undefined;\n    request.error = e;\n\n    try {\n      await runMiddlewares(request, onErrorMiddlewares, plugin);\n    } catch (e) {\n      // Save error that wasn't handled\n      e.originalError = request.error;\n      request.error = e;\n      throw request.error;\n    } // Catch if onError stack hasn't handled the error\n\n\n    if (request.response === undefined) throw request.error;\n  } finally {\n    var _plugin$requestEnd;\n\n    await (plugin === null || plugin === void 0 ? void 0 : (_plugin$requestEnd = plugin.requestEnd) === null || _plugin$requestEnd === void 0 ? void 0 : _plugin$requestEnd.call(plugin, request));\n  }\n\n  return request.response;\n};\n\nconst runMiddlewares = async (request, middlewares, plugin) => {\n  for (const nextMiddleware of middlewares) {\n    var _plugin$beforeMiddlew, _plugin$afterMiddlewa;\n\n    plugin === null || plugin === void 0 ? void 0 : (_plugin$beforeMiddlew = plugin.beforeMiddleware) === null || _plugin$beforeMiddlew === void 0 ? void 0 : _plugin$beforeMiddlew.call(plugin, nextMiddleware === null || nextMiddleware === void 0 ? void 0 : nextMiddleware.name);\n    const res = await (nextMiddleware === null || nextMiddleware === void 0 ? void 0 : nextMiddleware(request));\n    plugin === null || plugin === void 0 ? void 0 : (_plugin$afterMiddlewa = plugin.afterMiddleware) === null || _plugin$afterMiddlewa === void 0 ? void 0 : _plugin$afterMiddlewa.call(plugin, nextMiddleware === null || nextMiddleware === void 0 ? void 0 : nextMiddleware.name); // short circuit chaining and respond early\n\n    if (res !== undefined) {\n      request.response = res;\n      return;\n    }\n  }\n};\n\nmodule.exports = middy;\n", "\"use strict\";\n\nconst {\n  Agent\n} = require('https'); // const { NodeHttpHandler } = require('@aws-sdk/node-http-handler') // aws-sdk v3\n\n\nconst awsClientDefaultOptions = {\n  // AWS SDK v3\n  // Docs: https://docs.aws.amazon.com/sdk-for-javascript/v3/developer-guide/enforcing-tls.html\n\n  /* requestHandler: new NodeHttpHandler({\n    httpsAgent: new Agent(\n      {\n        secureProtocol: 'TLSv1_2_method'\n      }\n    )\n  }) */\n  // Docs: https://docs.aws.amazon.com/sdk-for-javascript/v2/developer-guide/enforcing-tls.html\n  httpOptions: {\n    agent: new Agent({\n      secureProtocol: 'TLSv1_2_method'\n    })\n  }\n};\n\nconst createPrefetchClient = options => {\n  const awsClientOptions = { ...awsClientDefaultOptions,\n    ...options.awsClientOptions\n  };\n  const client = new options.AwsClient(awsClientOptions); // AWS XRay\n\n  if (options.awsClientCapture) {\n    return options.awsClientCapture(client);\n  }\n\n  return client;\n};\n\nconst createClient = async (options, request) => {\n  let awsClientCredentials = {}; // Role Credentials\n\n  if (options.awsClientAssumeRole) {\n    if (!request) throw new Error('Request required when assuming role');\n    awsClientCredentials = await getInternal({\n      credentials: options.awsClientAssumeRole\n    }, request);\n  }\n\n  awsClientCredentials = { ...awsClientCredentials,\n    ...options.awsClientOptions\n  };\n  return createPrefetchClient({ ...options,\n    awsClientOptions: awsClientCredentials\n  });\n};\n\nconst canPrefetch = options => {\n  return !(options !== null && options !== void 0 && options.awsClientAssumeRole) && !(options !== null && options !== void 0 && options.disablePrefetch);\n}; // Internal Context\n\n\nconst getInternal = async (variables, request) => {\n  if (!variables || !request) return {};\n  let keys = [];\n  let values = [];\n\n  if (variables === true) {\n    keys = values = Object.keys(request.internal);\n  } else if (typeof variables === 'string') {\n    keys = values = [variables];\n  } else if (Array.isArray(variables)) {\n    keys = values = variables;\n  } else if (typeof variables === 'object') {\n    keys = Object.keys(variables);\n    values = Object.values(variables);\n  }\n\n  const promises = [];\n\n  for (const internalKey of values) {\n    var _valuePromise;\n\n    // 'internal.key.sub_value' -> { [key]: internal.key.sub_value }\n    const pathOptionKey = internalKey.split('.');\n    const rootOptionKey = pathOptionKey.shift();\n    let valuePromise = request.internal[rootOptionKey];\n\n    if (typeof ((_valuePromise = valuePromise) === null || _valuePromise === void 0 ? void 0 : _valuePromise.then) !== 'function') {\n      valuePromise = Promise.resolve(valuePromise);\n    }\n\n    promises.push(valuePromise.then(value => pathOptionKey.reduce((p, c) => p === null || p === void 0 ? void 0 : p[c], value)));\n  } // ensure promise has resolved by the time it's needed\n  // If one of the promises throws it will bubble up to @middy/core\n\n\n  values = await Promise.allSettled(promises);\n  const errors = values.filter(res => res.status === 'rejected').map(res => res.reason.message);\n  if (errors.length) throw new Error(JSON.stringify(errors));\n  return keys.reduce((obj, key, index) => ({ ...obj,\n    [sanitizeKey(key)]: values[index].value\n  }), {});\n};\n\nconst sanitizeKeyPrefixLeadingNumber = /^([0-9])/;\nconst sanitizeKeyRemoveDisallowedChar = /[^a-zA-Z0-9]+/g;\n\nconst sanitizeKey = key => {\n  return key.replace(sanitizeKeyPrefixLeadingNumber, '_$1').replace(sanitizeKeyRemoveDisallowedChar, '_');\n}; // fetch Cache\n\n\nconst cache = {}; // key: { value:{fetchKey:Promise}, expiry }\n\nconst processCache = (options, fetch = () => undefined, request) => {\n  const {\n    cacheExpiry,\n    cacheKey\n  } = options;\n\n  if (cacheExpiry) {\n    const cached = getCache(cacheKey);\n    const unexpired = cached && (cacheExpiry < 0 || cached.expiry > Date.now());\n\n    if (unexpired && cached.modified) {\n      const value = fetch(request, cached.value);\n      cache[cacheKey] = {\n        value: { ...cached.value,\n          ...value\n        },\n        expiry: cached.expiry\n      };\n      return cache[cacheKey];\n    }\n\n    if (unexpired) {\n      return { ...cached,\n        cache: true\n      };\n    }\n  }\n\n  const value = fetch(request);\n  const expiry = Date.now() + cacheExpiry;\n\n  if (cacheExpiry) {\n    cache[cacheKey] = {\n      value,\n      expiry\n    };\n  }\n\n  return {\n    value,\n    expiry\n  };\n};\n\nconst getCache = key => {\n  return cache[key];\n}; // Used to remove parts of a cache\n\n\nconst modifyCache = (cacheKey, value) => {\n  if (!cache[cacheKey]) return;\n  cache[cacheKey] = { ...cache[cacheKey],\n    value,\n    modified: true\n  };\n};\n\nconst clearCache = (keys = null) => {\n  var _keys;\n\n  keys = (_keys = keys) !== null && _keys !== void 0 ? _keys : Object.keys(cache);\n  if (!Array.isArray(keys)) keys = [keys];\n\n  for (const cacheKey of keys) {\n    cache[cacheKey] = undefined;\n  }\n};\n\nconst jsonSafeParse = (string, reviver) => {\n  if (typeof string !== 'string') return string;\n  const firstChar = string[0];\n  if (firstChar !== '{' && firstChar !== '[' && firstChar !== '\"') return string;\n\n  try {\n    return JSON.parse(string, reviver);\n  } catch (e) {}\n\n  return string;\n};\n\nconst normalizeHttpResponse = response => {\n  var _response$headers, _response;\n\n  // May require updating to catch other types\n  if (response === undefined) {\n    response = {};\n  } else if (Array.isArray(response) || typeof response !== 'object' || response === null) {\n    response = {\n      body: response\n    };\n  }\n\n  response.headers = (_response$headers = (_response = response) === null || _response === void 0 ? void 0 : _response.headers) !== null && _response$headers !== void 0 ? _response$headers : {};\n  return response;\n}; // smaller version of `http-errors`\n\n\nconst statuses = require('./codes.json');\n\nconst {\n  inherits\n} = require('util');\n\nconst createErrorRegexp = /[^a-zA-Z]/g;\n\nconst createError = (code, message, properties = {}) => {\n  const name = statuses[code].replace(createErrorRegexp, '');\n  const className = name.substr(-5) !== 'Error' ? name + 'Error' : name;\n\n  function HttpError(message) {\n    // create the error object\n    const msg = message !== null && message !== void 0 ? message : statuses[code];\n    const err = new Error(msg); // capture a stack trace to the construction point\n\n    Error.captureStackTrace(err, HttpError); // adjust the [[Prototype]]\n\n    Object.setPrototypeOf(err, HttpError.prototype); // redefine the error message\n\n    Object.defineProperty(err, 'message', {\n      enumerable: true,\n      configurable: true,\n      value: msg,\n      writable: true\n    }); // redefine the error name\n\n    Object.defineProperty(err, 'name', {\n      enumerable: false,\n      configurable: true,\n      value: className,\n      writable: true\n    });\n    return err;\n  }\n\n  inherits(HttpError, Error);\n  const desc = Object.getOwnPropertyDescriptor(HttpError, 'name');\n  desc.value = className;\n  Object.defineProperty(HttpError, 'name', desc);\n  Object.assign(HttpError.prototype, {\n    status: code,\n    statusCode: code,\n    expose: code < 500\n  }, properties);\n  return new HttpError(message);\n};\n\nmodule.exports = {\n  createPrefetchClient,\n  createClient,\n  canPrefetch,\n  getInternal,\n  sanitizeKey,\n  processCache,\n  getCache,\n  modifyCache,\n  clearCache,\n  jsonSafeParse,\n  normalizeHttpResponse,\n  createError\n};\n", "\"use strict\";\n\nconst mimePattern = /^application\\/(.+\\+)?json(;.*)?$/;\nconst defaults = {\n  reviver: undefined\n};\n\nconst httpJsonBodyParserMiddleware = (opts = {}) => {\n  const options = { ...defaults,\n    ...opts\n  };\n\n  const httpJsonBodyParserMiddlewareBefore = async request => {\n    var _headers$ContentType;\n\n    const {\n      headers,\n      body\n    } = request.event;\n    const contentTypeHeader = (_headers$ContentType = headers === null || headers === void 0 ? void 0 : headers['Content-Type']) !== null && _headers$ContentType !== void 0 ? _headers$ContentType : headers === null || headers === void 0 ? void 0 : headers['content-type'];\n\n    if (mimePattern.test(contentTypeHeader)) {\n      try {\n        const data = request.event.isBase64Encoded ? Buffer.from(body, 'base64').toString() : body;\n        request.event.rawBody = body;\n        request.event.body = JSON.parse(data, options.reviver);\n      } catch (err) {\n        const {\n          createError\n        } = require('@middy/util'); // UnprocessableEntity\n\n\n        throw createError(422, 'Content type defined as JSON but an invalid JSON was provided');\n      }\n    }\n  };\n\n  return {\n    before: httpJsonBodyParserMiddlewareBefore\n  };\n};\n\nmodule.exports = httpJsonBodyParserMiddleware;\n", "import type { ValidatedEventAPIGatewayProxyEvent } from '@libs/apiGateway';\nimport { formatJSONResponse } from '@libs/apiGateway';\nimport { middyfy } from '@libs/lambda';\nimport {createSchema, updateSchema, readSchema} from './schema';\nimport OrderModel from \"@models/order.model\";\nimport ResponseModel from \"../../models/response.model\";\n\n// Services\nimport DatabaseService from \"../../services/database.service\";\nconst create: ValidatedEventAPIGatewayProxyEvent<typeof createSchema> = async (event) => {\n  let id: String;\n  try {\n    \n    const databaseService = new DatabaseService();\n    const listModel = new ListModel({name:\"\"});\n    // Get model data\n    const data = listModel.getEntityMappings();\n          \n    // Initialise DynamoDB PUT parameters\n    const params = {\n        TableName: process.env.LIST_TABLE,\n        Item: {\n            id: data.id,\n            name: data.name,\n            createdAt: data.timestamp,\n            updatedAt: data.timestamp,\n        }\n    }\n    console.log(params)\n    // Inserts item into DynamoDB table\n    // await databaseService.create(params);\n    // id = data.id \n  } catch (error) {\n    console.log(error)\n  }\n\n  // return data.id;\n  return formatJSONResponse({\n    message: `Hello , welcome to the exciting Serverless world! your id : ${id}`,\n    event,\n  });\n}\nconst read: ValidatedEventAPIGatewayProxyEvent<typeof createSchema> = async (event) => {\n  try {\n    // const databaseService = new DatabaseService();\n    // const listModel = new ListModel({name:event.body.name});\n    // // Get model data\n    // const data = listModel.getEntityMappings();\n          \n    // // Initialise DynamoDB PUT parameters\n    // const params = {\n    //     TableName: process.env.LIST_TABLE,\n    //     Item: {\n    //         id: data.id,\n    //         name: data.name,\n    //         createdAt: data.timestamp,\n    //         updatedAt: data.timestamp,\n    //     }\n    // }\n    // console.log(params)\n    // Inserts item into DynamoDB table\n    // await databaseService.create(params);\n    // id = data.id \n  } catch (error) {\n    console.log(error)\n  }\n\n  // return data.id;\n  return formatJSONResponse({\n    message: `read serverless`,\n    event,\n  });\n}\nconst update: ValidatedEventAPIGatewayProxyEvent<typeof createSchema> = async (event) => {\n  try {\n    // const databaseService = new DatabaseService();\n    // const listModel = new ListModel({name:event.body.name});\n    // // Get model data\n    // const data = listModel.getEntityMappings();\n          \n    // // Initialise DynamoDB PUT parameters\n    // const params = {\n    //     TableName: process.env.LIST_TABLE,\n    //     Item: {\n    //         id: data.id,\n    //         name: data.name,\n    //         createdAt: data.timestamp,\n    //         updatedAt: data.timestamp,\n    //     }\n    // }\n    // console.log(params)\n    // Inserts item into DynamoDB table\n    // await databaseService.create(params);\n    // id = data.id \n  } catch (error) {\n    console.log(error)\n  }\n\n  // return data.id;\n  return formatJSONResponse({\n    message: `read serverless`,\n    event,\n  });\n}\nconst softDelete: ValidatedEventAPIGatewayProxyEvent<typeof createSchema> = async (event) => {\n  try {\n    // const databaseService = new DatabaseService();\n    // const listModel = new ListModel({name:event.body.name});\n    // // Get model data\n    // const data = listModel.getEntityMappings();\n          \n    // // Initialise DynamoDB PUT parameters\n    // const params = {\n    //     TableName: process.env.LIST_TABLE,\n    //     Item: {\n    //         id: data.id,\n    //         name: data.name,\n    //         createdAt: data.timestamp,\n    //         updatedAt: data.timestamp,\n    //     }\n    // }\n    // console.log(params)\n    // Inserts item into DynamoDB table\n    // await databaseService.create(params);\n    // id = data.id \n  } catch (error) {\n    console.log(error)\n  }\n\n  // return data.id;\n  return formatJSONResponse({\n    message: `read serverless`,\n    event,\n  });\n}\nconst readList: ValidatedEventAPIGatewayProxyEvent<typeof createSchema> = async (event) => {\n  try {\n    // const databaseService = new DatabaseService();\n    // const listModel = new ListModel({name:event.body.name});\n    // // Get model data\n    // const data = listModel.getEntityMappings();\n          \n    // // Initialise DynamoDB PUT parameters\n    // const params = {\n    //     TableName: process.env.LIST_TABLE,\n    //     Item: {\n    //         id: data.id,\n    //         name: data.name,\n    //         createdAt: data.timestamp,\n    //         updatedAt: data.timestamp,\n    //     }\n    // }\n    // console.log(params)\n    // Inserts item into DynamoDB table\n    // await databaseService.create(params);\n    // id = data.id \n  } catch (error) {\n    console.log(error)\n  }\n\n  // return data.id;\n  return formatJSONResponse({\n    message: `read serverless`,\n    event,\n  });\n}\nconst createSL = middyfy(create);\nconst readSL = middyfy(read);\nconst updateSL = middyfy(update);\nconst softDeleteSL = middyfy(softDelete);\nconst readListSL = middyfy(readList);\n\nexport {createSL, readSL, readListSL, updateSL, softDeleteSL}\n", "import type { APIGatewayProxyEvent, APIGatewayProxyResult, Handler } from \"aws-lambda\"\nimport type { FromSchema } from \"json-schema-to-ts\";\n\ntype ValidatedAPIGatewayProxyEvent<S> = Omit<APIGatewayProxyEvent, 'body'> & { body: FromSchema<S> }\nexport type ValidatedEventAPIGatewayProxyEvent<S> = Handler<ValidatedAPIGatewayProxyEvent<S>, APIGatewayProxyResult>\n\nexport const formatJSONResponse = (response: Record<string, unknown>) => {\n  return {\n    statusCode: 200,\n    body: JSON.stringify(response)\n  }\n}\n", "import middy from \"@middy/core\"\nimport middyJsonBodyParser from \"@middy/http-json-body-parser\"\n\nexport const middyfy = (handler) => {\n  return middy(handler).use(middyJsonBodyParser())\n}\n", "import * as AWS from 'aws-sdk';\r\n\r\n// Models\r\nimport ResponseModel from '../models/response.model';\r\n\r\n// Interfaces\r\nimport IConfig from '../interfaces/config.interface';\r\n\r\n// Enums\r\nimport { StatusCode } from \"../enums/status-code.enum\";\r\nimport { ResponseMessage } from \"../enums/response-message.enum\";\r\n\r\n// Put\r\ntype PutItem = AWS.DynamoDB.DocumentClient.PutItemInput;\r\ntype PutItemOutput = AWS.DynamoDB.DocumentClient.PutItemOutput;\r\n\r\n// Batch write\r\ntype BatchWrite = AWS.DynamoDB.DocumentClient.BatchWriteItemInput;\r\ntype BatchWriteOutPut = AWS.DynamoDB.DocumentClient.BatchWriteItemOutput;\r\n\r\n// Update\r\ntype UpdateItem = AWS.DynamoDB.DocumentClient.UpdateItemInput;\r\ntype UpdateItemOutPut = AWS.DynamoDB.DocumentClient.UpdateItemOutput;\r\n\r\n// Query\r\ntype QueryItem = AWS.DynamoDB.DocumentClient.QueryInput;\r\ntype QueryItemOutput = AWS.DynamoDB.DocumentClient.QueryOutput;\r\n\r\n// Get\r\ntype GetItem = AWS.DynamoDB.DocumentClient.GetItemInput;\r\ntype GetItemOutput = AWS.DynamoDB.DocumentClient.GetItemOutput;\r\n\r\n// Delete\r\ntype DeleteItem = AWS.DynamoDB.DocumentClient.DeleteItemInput;\r\ntype DeleteItemOutput = AWS.DynamoDB.DocumentClient.DeleteItemOutput;\r\n\r\ntype Item = {[index: string]: string};\r\n\r\nconst {\r\n    STAGE,\r\n    DYNAMODB_LOCAL_STAGE,\r\n    DYNAMODB_LOCAL_ACCESS_KEY_ID,\r\n    DYNAMODB_LOCAL_SECRET_ACCESS_KEY,\r\n    DYNAMODB_LOCAL_ENDPOINT\r\n} = process.env;\r\n\r\nconst config: IConfig = { region: \"eu-west-1\" };\r\nif (STAGE === DYNAMODB_LOCAL_STAGE) {\r\n    config.accessKeyId = DYNAMODB_LOCAL_ACCESS_KEY_ID; // local dynamodb accessKeyId\r\n    config.secretAccessKey = DYNAMODB_LOCAL_SECRET_ACCESS_KEY; // local dynamodb secretAccessKey\r\n    config.endpoint = DYNAMODB_LOCAL_ENDPOINT; // local dynamodb endpoint\r\n}\r\nAWS.config.update(config);\r\n\r\nconst documentClient = new AWS.DynamoDB.DocumentClient();\r\n\r\nexport default class DatabaseService {\r\n\r\n    getItem = async ({ key, hash, hashValue, tableName}: Item) => {\r\n        const params = {\r\n            TableName: tableName,\r\n            Key: {\r\n                id: key,\r\n            },\r\n        }\r\n        if (hash) {\r\n            params.Key[hash] = hashValue;\r\n        }\r\n        const results = await this.get(params);\r\n        if (Object.keys(results).length) {\r\n            return results;\r\n        }\r\n        console.error('Item does not exist');\r\n        throw new ResponseModel({ id: key }, StatusCode.BAD_REQUEST, ResponseMessage.INVALID_REQUEST)\r\n    }\r\n\r\n    create = async(params: PutItem): Promise<PutItemOutput> => {\r\n        try {\r\n            return await documentClient.put(params).promise();\r\n        } catch (error) {\r\n            console.error(`create-error: ${error}`);\r\n            throw new ResponseModel({}, 500, `create-error: ${error}`);\r\n        }\r\n    }\r\n\r\n    batchCreate = async(params: BatchWrite): Promise<BatchWriteOutPut> => {\r\n        try {\r\n            return await documentClient.batchWrite(params).promise();\r\n        } catch (error) {\r\n            console.error(`batch-write-error: ${error}`);\r\n            throw new ResponseModel({}, 500, `batch-write-error: ${error}`);\r\n        }\r\n    }\r\n\r\n    update = async (params: UpdateItem): Promise<UpdateItemOutPut> => {\r\n        try {\r\n            // result.Attributes\r\n            return await documentClient.update(params).promise();\r\n        } catch (error) {\r\n            console.error(`update-error: ${error}`);\r\n            throw new ResponseModel({}, 500, `update-error: ${error}`);\r\n        }\r\n    }\r\n\r\n    query = async (params: QueryItem): Promise<QueryItemOutput> => {\r\n        try {\r\n            return await documentClient.query(params).promise();\r\n        } catch (error) {\r\n            console.error(`query-error: ${error}`);\r\n            throw new ResponseModel({}, 500, `query-error: ${error}`);\r\n        }\r\n    }\r\n\r\n    get = async (params: GetItem): Promise<GetItemOutput> => {\r\n        console.log('DB GET - STAGE: ', STAGE);\r\n        console.log('DB GET - params.TableName: ', params.TableName);\r\n        console.log('DB GET - params.Key: ', params.Key);\r\n\r\n        try {\r\n            return await documentClient.get(params).promise();\r\n        } catch (error) {\r\n            console.error(`get-error - TableName: ${params.TableName}`);\r\n            console.error(`get-error: ${error}`);\r\n            throw new ResponseModel({}, 500, `get-error: ${error}`);\r\n        }\r\n    }\r\n\r\n    delete = async (params: DeleteItem): Promise<DeleteItemOutput> => {\r\n        try {\r\n            return await documentClient.delete(params).promise();\r\n        } catch (error) {\r\n            console.error(`delete-error: ${error}`);\r\n            throw new ResponseModel({}, 500, `delete-error: ${error}`);\r\n        }\r\n    }\r\n\r\n}", "export enum StatusCode {\r\n    OK = 200,\r\n    ERROR = 500,\r\n    BAD_REQUEST = 400,\r\n}", "// Interfaces\r\ntype ResponseHeader = { [header: string]: string | number | boolean; }\r\ninterface IResponseBody {\r\n    data: any;\r\n    message: string;\r\n    status?: string;\r\n}\r\n\r\ninterface IResponse {\r\n    statusCode: number;\r\n    headers: ResponseHeader;\r\n    body: string;\r\n}\r\n\r\n// Enums\r\n// Enums\r\nimport { Status } from '../enums/status.enum';\r\nimport { StatusCode } from '../enums/status-code.enum';\r\n\r\nconst RESPONSE_HEADERS: ResponseHeader = {\r\n    'Content-Type': 'application/json',\r\n    'Access-Control-Allow-Origin': '*', // Required for CORS support to work\r\n    'Access-Control-Allow-Credentials': true, // Required for cookies, authorization headers with HTTPS\r\n};\r\n\r\n/**\r\n * class ResponseModel\r\n */\r\nexport default class ResponseModel {\r\n    private body: IResponseBody;\r\n    private code: number;\r\n\r\n    /**\r\n     * ResponseModel Constructor\r\n     * @param data\r\n     * @param code\r\n     * @param message\r\n     */\r\n    constructor(data = {}, code = 402, message = '') {\r\n        this.body = {\r\n            data: data,\r\n            message: message,\r\n            status: StatusCode[code],\r\n        };\r\n        this.code = code;\r\n    }\r\n\r\n    /**\r\n     * Add or update a body variable\r\n     * @param variable\r\n     * @param value\r\n     */\r\n    setBodyVariable = (variable: string, value: string): void => {\r\n        this.body[variable] = value;\r\n    }\r\n\r\n    /**\r\n     * Set Data\r\n     * @param data\r\n     */\r\n    setData = (data: any): void => {\r\n        this.body.data = data;\r\n    }\r\n\r\n    /**\r\n     * Set Status Code\r\n     * @param code\r\n     */\r\n    setCode = (code: number): void => {\r\n        this.code = code;\r\n    }\r\n\r\n    /**\r\n     * Get Status Code\r\n     * @return {*}\r\n     */\r\n    getCode = (): number => {\r\n        return this.code;\r\n    }\r\n\r\n    /**\r\n     * Set message\r\n     * @param message\r\n     */\r\n    setMessage = (message: string): void => {\r\n        this.body.message = message;\r\n    }\r\n\r\n    /**\r\n     * Get Message\r\n     * @return {string|*}\r\n     */\r\n    getMessage = (): any => {\r\n        return this.body.message;\r\n    }\r\n\r\n    /**\r\n     * Geneate a response\r\n     * @return {IResponse}\r\n     */\r\n    generate = (): IResponse => {\r\n        return {\r\n            statusCode: this.code,\r\n            headers: RESPONSE_HEADERS,\r\n            body: JSON.stringify(this.body),\r\n        };\r\n    }\r\n}"],
  "mappings": "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",
  "names": []
}
